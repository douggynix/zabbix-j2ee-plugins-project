package zabbix.agent;
/*AUTHOR               : Lefruit James Douglass
 * LOCATION            : Grenoble, France
 * UNIVERSITY          : ENSIMAG-UNIVERSITE JOSEPH FOURIER(GRENOBLE 1)
 * MASTER        	   : Computer Security, Cryptology and Secure Coding
 * MAIN COUNTRY 	   : HAITI
 * FIRST UNIVERSITY    : ESIH (ECOLE SUPERIEURE D'INFOTRONIQUE D'HAITI), Port-au-Prince, Haiti 
 * I have implemented this appender for Standard and Enterprise (J2EE)Java applications, and Java
 * Java application Servers(Weblogic, JBoss etc..)  using Apache Log4j Framework to log exceptions 
 * and errors. Log4j is an open source framework which separates log error layout pattern(message content) 
 * from their destination(Appender) that may be the standard output(Console: stdout), File(text file) or
 * a remote socket. In other words, error messages can be formatted independently according to their destination.
 * In addition, Log4j enables to filter messages according to its level : info, warn, error, fatal et log.
 * As a result, messages pattern may be different for different error levels and destinations Appenders.
 * Log4j has some ready-to-use appenders like Console, File and Socket appenders. But, it has a pluggable
 * interface so that one can develop its own appender to process the messages and take actions upon specific
 * needs. Hence, I develop an appender that process log messages from a java applications
 * to be able to send it to a Zabbix Server. Zabbix is an opensource enterprise class and distributed monitoring system. 
 * Therefore, with the help of this appender any infrastructure using Zabbix as their main monitoring systems can be
 * warned in real time about Errors from java applications they want to monitor without going through the logs 
 * for troubleshooting. This appender is called ZabbixAppender and distributed under GNU Public Licence version 2 and 
 * can be used freely according the licence terms. 
 * 
 License : GPL
 * 
 */




import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
//import java.net.InetAddress;
//import java.net.UnknownHostException;
import java.io.InputStreamReader;
//import java.io.OutputStream;
//import java.io.PrintWriter;
import java.io.BufferedReader;
import java.util.Date;

//Log4j Packages
import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.spi.LoggingEvent;
//import org.apache.log4j.Level;
public class ZabbixAppender extends AppenderSkeleton  {
	
	/*These Variable are initialized in log4j.properties or log4j.xml file using 
	appendername.port=Port_Number
	appendername.host=ZabbixServer_IPADDRESS
	appendername.agent=UniqueNameForAgent
	.................
	*/ 
	private String port="10051"; //(Optional) Default Port of Zabbix Server 10051. 
	private String host; //(Mandatory)IP Address or hostname of the Zabbix Server.
	private String key="key.log4j"; //Default Key is key.log4j
	private String agent; //(Mandatory) Unique Hostname for the Agent. 
	private String domain="";//(Optional) Weblogic Domain Name That will Prefix the Log Message
	
	
	
	
	public ZabbixAppender()
	{
		super();
	}
	
	public void setPort(String value) {
		this.port = value;
	}
   
    public String getPort() {
		return this.port;
	}

    
    public void setKey(String value) {
		this.key = value;
	}
   
    public String getKey() {
		return this.key;
	}
    
    
    public void setHost(String value) {
		this.host = value;
	}
   
    public String getHost() {
		return this.host;
	}
    
    
    public void setAgent(String value) {
		this.agent = value;
	}
   
    public String getAgent() {
		return this.agent;
	}
    
   
    public String getDomain() {
		return domain;
	}

	public void setDomain(String domain) {
		this.domain = domain;
	}

	
	//This method is called whenever Log4j has this class for its appender in log4j.properties
	
	 protected void append(LoggingEvent loggingevent) {
		
		    String log_message = this.layout.format(loggingevent);
		    
		    try {
				this.sendLogMessage(log_message);
			} catch (Exception e) {
				
				System.out.println("Error on Connection to Zabbix Server on port "+this.getPort()+" : "+e.getMessage());
			}
		    System.out.println("Zabbix Appender Called : "+log_message);
		    System.out.println(this.getHost()+":"+this.getPort()+ "-->"+this.getAgent()+", key : "+this.getKey()+" ,domain -->"+this.getDomain());	
		  }

	 //Method to that send the log message to Zabbix Server when a log is generated by log4j
	 	public void sendLogMessage(String logmessage) throws Exception{
	 		Socket sock;
	 		 System.out.println("Connection Opened on Host");
			    //Socket sock=null;
			    String data=null;
				BufferedReader ServerStream=null;
				
				sock = new Socket(this.getHost(),Integer.parseInt(this.getPort()));
				
				ServerStream = new BufferedReader(new InputStreamReader(sock.getInputStream()));
				
				String json_buffer=this.buildJSonString(this.getAgent(),this.getKey(),this.getDomain()+" : "+logmessage);
				System.out.println(json_buffer);
			
				this.writeMessage(sock.getOutputStream(),json_buffer.getBytes());
				
				
				while( ( data= ServerStream.readLine())!=null)
					System.out.println(data);
				
				sock.close();
				System.out.println("Connection \"closed\"  ");
				
	 		
	 		
	 	}
	 	
	 	
	 	
	 	
	 	public final synchronized void activateOptions() {
	 		setPort(this.port);
			super.activateOptions();
		}
	 	
		  public void close() {
		    // nothing to do
		  }

		  public boolean requiresLayout() {
		    return true;
		  }
		  
		
		/*Function from Zabbix Wiki : http://www.zabbix.com/wiki/doc/tech/proto/zabbixsenderprotocol
		  This method takes as input a host, an item, and a value to make up the JSON String.
		  Host here is the agent name found in Zabbix agent config file /etc/zabbix/zabbix_agentd.conf 
		  with the directive Hostname. Or The hostname found in Zabbix Webadmin frontend in the list
		  of hosts configured in Configurations-->Hosts
		*/
		public String buildJSonString(String host, String item, String value)
		{
			//Code source comment from zabbix C source code for Clarification on Parameters
			/******************************************************************************
			 *                                                                            *
			 * Function: process_value                                                    *
			 *                                                                            *
			 * Purpose: Buffer new value or send the whole buffer to the server           *
			 *                                                                            *
			 * Parameters: host - IP or Hostname of ZABBIX server                         *
			 *             port - port of ZABBIX server                                   *
			 *             hostname - name of host in ZABBIX database                     *
			 *             key - name of metric                                           *
			 *             value - string version os key value                            *
			 *             lastlogsize - size of readed logfile                           *
			 *             timestamp - timestamp of readed value                          *
			 *             source - name of logged data source                            *
			 *             severity - severity of logged data sources                     *
			 *                                                                            *
			 * Return value: returns SUCCEED on succesfull parsing,                       *
			 *               FAIL on other cases                                          *
			 *                                                                            *
			 * Author: Alexei Vladishev                                                   *
			 *                                                                            *
			 * Comments:                                                                  *
			 *                                                                            *
			 ******************************************************************************/
			
			
			long clock = new Date().getTime();
			int lastlogsize=0;
			return           "{"
								+ "\"request\":\"agent data\",\n"
								+ "\"data\":[\n"
								+        "{\n"
								+                "\"host\":\"" + host + "\",\n"
								+                "\"key\":\"" + item + "\",\n"
								+                "\"value\":\"" + value.replace("\\", "\\\\") + "\",\n"
								+                "\"lastlogsize\":\"" + lastlogsize + "\",\n"
								+                "\"clock\":\"" + clock+ "\"}],\n"
								+                "\"clock\":\"" + clock + "\"}\n";
		}
		
		//Function from Zabbix Wiki : http://www.zabbix.com/wiki/doc/tech/proto/zabbixsenderprotocol
		//This method helps formatting and sending message according to Zabbix protocol to Zabbix Server 
		public   void writeMessage(OutputStream out, byte[] data) throws IOException
		{
				int length = data.length;
				
				out.write(new byte[] {
				      'Z', 'B', 'X', 'D',
				      '\1',
				      (byte)(length & 0xFF),
				      (byte)((length & 0x00FF) >> 8),
				      (byte)((length & 0x0000FF) >> 16),
				      (byte)((length & 0x000000FF) >> 24),
				      '\0','\0','\0','\0'});
				
				out.write(data);
		}
		
		
		
		  
}
